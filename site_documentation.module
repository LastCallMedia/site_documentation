<?php

/**
 * @file
 * Site Documentation module file.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\site_documentation\Entity\SiteDocumentation;
use Drupal\views\Views;

/**
 * Implements hook_module_implements_alter().
 */
function site_documentation_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'help' && isset($implementations['help'])) {
    unset($implementations['help']);
  }
}

/**
 * Implements hook_theme().
 */
function site_documentation_theme($existing, $type, $theme, $path) {
  return [
    'site_documentation' => [
      'render element' => 'elements',
    ],
    'help_section__site_documentation' => [
      'variables' => [
        'documents_view' => null,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function site_documentation_site_documentation_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($build['#view_mode'] !== 'full') {
    return;
  }

  $topics = $entity->get('field_documentation_topics')->getValue();
  if (!empty($topics[0]['target_id'])) {
    $args = [$topics[0]['target_id'], $entity->id()];
    $view = Views::getView('related_site_documents');
    if (is_object($view)) {
      $view->setArguments($args);
      $view->setDisplay('block_1');
      $view->preExecute();
      $view->execute();
      $build['related_docs'] = $view->buildRenderable('block_1', $args);
    }
  }
}

/**
 * Add useful variables for template.
 */
function site_documentation_preprocess_site_documentation(&$vars) {

  $vars['view_mode'] = $vars['elements']['#view_mode'];
  // Helpful $content variable for templates.
  $vars += ['content' => []];
  foreach (Element::children($vars['elements']) as $key) {
    $vars['content'][$key] = $vars['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function site_documentation_preprocess_help_section__site_documentation(&$vars) {
  $vars['documents_view'] = get_all_documentations_view();
}

/**
 * Implements hook_help_section_info_alter().
 */
function site_documentation_help_section_info_alter(array &$info) {

  foreach ($info as $plugin_id => $plugin_info) {
    if (empty($info[$plugin_id]['permission'])) {
      $info[$plugin_id]['permission'] = 'access ' . $plugin_id . ' help section';
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function site_documentation_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook !== 'help_section') {
    return;
  }

  if ($variables['title']->render() === 'Site Documentation') {
    // Both lines below are needed.
    $suggestions[] = 'help_section__site_documentation';
    $variables['theme_hook_original'] = 'help_section__site_documentation';
  }
}

/**
 * Helper function. Gets all site documentations list renderable array
 * @return array|null
 */
function get_all_documentations_view() {
  $view = Views::getView('related_site_documents');
  if (is_object($view)) {
    $view->setDisplay('block_2');
    $view->preExecute();
    $view->execute();
    return $view->buildRenderable('block_2', []);
  }
  return [];
}
